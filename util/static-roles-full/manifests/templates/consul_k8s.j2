---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ settings.project_name }}-{{ item.key }}
  namespace: {{ SAS_K8S_NAMESPACE }}
spec:
  serviceName: "{{ settings.project_name }}-{{ item.key }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ settings.project_name }}-{{ item.key }}
        domain: {{ settings.project_name }}
    spec:
{% if SECURE_CONSUL %}
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      serviceAccountName: {{ settings.project_name }}-account
{% else %}
      # Required for TLS configurations
      #serviceAccountName: {{ settings.project_name }}-account
{% endif %}
      subdomain: {{ settings.project_name }}-subdomain
      containers:
      - name: {{ settings.project_name }}-{{ item.key }}
{% for regkey,regvalue in registries.items() %}
        image: {{ regvalue.url }}/{{ regvalue.namespace }}/{{ settings.project_name }}-{{ item.key }}:{{ docker_tag | default('latest') }}
{% endfor %}
        imagePullPolicy: Always
{% if item.value.ports is defined and item.value.ports %}
        ports:
{%   for ports in item.value.ports %}
        - containerPort: {{ ports.split(':')[0] }}
{%   endfor %}
{% endif %}
        env:
        - name: DEPLOYMENT_NAME
          value: "{{ settings.project_name }}"
        - name: CACERTS_CONFIGMAP
          value: "{{ settings.project_name }}-cacerts-configmap"
        - name: VAULT_TOKENS_CONFIGMAP
          value: consul-tokens-configmap
        - name: VAULT_SERVICES_CONFIGMAP
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: vault_services_configmap
        - name: SASSERVICES_CONFIGMAP
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: sas_services_configmap
        - name: CONSUL_HTTP_ADDR
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: consul_http_addr
        - name: SAS_ANCHORS_DIR
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: sas_anchors_dir
        - name: VAULT_TOKEN_DIR
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: vault_token_dir
        - name: CONSUL_SERVICE_NAME
          value: {{ settings.project_name }}-{{ item.key }}
{% if custom_services is defined and custom_services %}
        # Writing out user defined variables
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.environment is defined and value.deployment_overrides.environment %}
{%       for override in value.deployment_overrides.environment %}
        - name: {{ override.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ override.split('=')[0] | lower }}
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endif %}
{% if item.value.environment is defined and item.value.environment %}
        # Writing out pre-defined variables
{%   if custom_services is defined and custom_services %}
{%     set vars = {'found': False} %}
{%     for environment in item.value.environment %}
{%       set cm_key = environment.split('=')[0] + '=' %}
{%       if vars.update({'found': False}) %} {% endif %}
{%       if item.key in custom_services %}
{%         for key,value in custom_services.items() %}
{%           if key == item.key and value.deployment_overrides.environment is defined and value.deployment_overrides.environment %}
{%             for override in value.deployment_overrides.environment %}
{%               if cm_key in override %}
{%                 if vars.update({'found': True}) %} {% endif %}
{%               endif %}
{%             endfor %}
{%           endif %}
{%         endfor %}
{%         if not vars.found %}
        - name: {{ environment.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ environment.split('=')[0] | lower }}
{%         endif %}
{%       else %}
        - name: {{ environment.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ environment.split('=')[0] | lower }}
{%       endif %}
{%     endfor %}
{%   else %}
{%     for environment in item.value.environment %}
        - name: {{ environment.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-{{ item.key }}
              key: {{ environment.split('=')[0] | lower }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if custom_services is defined and custom_services %}
        # Writing out user defined secrets
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.secrets is defined and value.deployment_overrides.secrets %}
{%       for override in value.deployment_overrides.secrets %}
{%         if 'CONSUL_HTTP_TOKEN' not in override %}
        - name: {{ override.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key | lower }}
              key: {{ override.split('=')[0] | lower }}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endif %}
{% if item.value.secrets is defined and item.value.secrets %}
{%   if custom_services is defined and custom_services %}
{%     set vars = {'found': False} %}
{%     for secrets in item.value.secrets %}
{%       set cm_key = secrets.split('=')[0] + '=' %}
{%       if vars.update({'found': False}) %} {% endif %}
{%       if item.key in custom_services %}
{%         for key,value in custom_services.items() %}
{%           if key == item.key and value.deployment_overrides.secrets is defined and value.deployment_overrides.environment %}
{%             for override in value.deployment_overrides.secrets %}
{%               if cm_key in override %}
{%                 if vars.update({'found': True}) %} {% endif %}
{%               endif %}
{%             endfor %}
{%           endif %}
{%         endfor %}
{%         if not vars.found %}
{%           if 'CONSUL_HTTP_TOKEN' not in secrets %}
        - name: {{ secrets.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key | lower }}
              key: {{ secrets.split('=')[0] | lower }}
{%           endif %}
{%         endif %}
{%       else %}
{%         if 'CONSUL_HTTP_TOKEN' not in secrets %}
        - name: {{ secrets.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key | lower }}
              key: {{ secrets.split('=')[0] | lower }}
{%         endif %}
{%       endif %}
{%     endfor %}
{%   else %}
        # Writing out pre-defined secrets
{%     for secrets in item.value.secrets %}
{%       if 'CONSUL_HTTP_TOKEN' not in secrets %}
        - name: {{ secrets.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key | lower }}
              key: {{ secrets.split('=')[0] | lower }}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endif %}
        resources:
{% if custom_services is defined and custom_services and item.key in custom_services %}
          # Writing out user defined resources
{%   if vars.update({'found': False}) %} {% endif %}
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.resources is defined and value.deployment_overrides.resources %}
{%      if vars.update({'found': True}) %} {% endif %}
          {{ value.deployment_overrides.resources | indent(10) }}
{%     endif %}
{%   endfor %}
{%   if not vars.found %}
{%     if item.value.resources is defined and item.value.resources %}
          # Writing out pre-defined resources
{%       for key,value in item.value.resources.items() %}
          {{ key }}:
{%         for items in value %}
            {{ items.split('=')[0] }}: {{ items.split('=')[1] }}
{%         endfor %}
{%       endfor %}
{%     endif %}
{%   endif %}
{% else %}
{%   if item.value.resources is defined and item.value.resources %}
          # Writing out pre-defined resources
{%     for key,value in item.value.resources.items() %}
          {{ key }}:
{%       for items in value %}
            {{ items.split('=')[0] }}: {{ items.split('=')[1] }}
{%       endfor %}
{%     endfor %}
{%   endif %}
{% endif %}
        volumeMounts:
{% if SECURE_CONSUL %}
        # Required for TLS HA configurations comment out existing empty dir volumeMount
        #- name: consul-persistent-storage
        #  mountPath: /consul/config
        #- name: consul-persistent-storage
        #  mountPath: /consul/data
{% endif %}
{% if custom_services is defined and custom_services %}
        # Writing out user defined volume mounts
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.volume_mounts is defined and value.deployment_overrides.volume_mounts %}
        {{ value.deployment_overrides.volume_mounts | indent(8) }}
{%     endif %}
{%   endfor %}
{% endif %}
{% if item.value.volumes is defined and item.value.volumes %}
        # Writing out pre-defined volume mounts
{%   if custom_services is defined and custom_services %}
{%     for volumes in item.value.volumes %}
{%       set cm_key = volumes.split('=')[0] + '-volume' %}
{%       if vars.update({'found': False}) %} {% endif %}
{%       if item.key in custom_services %}
{%         for key,value in custom_services.items() %}
{%           if key == item.key and value.deployment_overrides.volume_mounts is defined and value.deployment_overrides.volume_mounts %}
{%             if cm_key in value.deployment_overrides.volume_mounts %}
{%               if vars.update({'found': True}) %} {% endif %}
{%             endif %}
{%           endif %}
{%         endfor %}
{%         if not vars.found %}
        - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
          mountPath: {{ volumes.split('=')[1] }}
{%         endif %}
{%       else %}
        - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
          mountPath: {{ volumes.split('=')[1] }}
{%       endif %}
{%     endfor %}
{%   else %}
{%     for volumes in item.value.volumes %}
        - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
          mountPath: {{ volumes.split('=')[1] }}
{%     endfor %}
{%   endif %}
{% endif %}
        - name: anchors
          mountPath: /anchors
        - name: tokens
          mountPath: /tokens
      volumes:
{% if custom_services is defined and custom_services %}
      # Writing out user defined volumes
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.volumes is defined and value.deployment_overrides.volumes %}
      {{ value.deployment_overrides.volumes | indent(6) }}
{%     endif %}
{%   endfor %}
{% endif %}
{% if item.value.volumes is defined and item.value.volumes %}
      # Writing out pre-defined volumes
{%   if custom_services is defined and custom_services %}
{%     for volumes in item.value.volumes %}
{%       set cm_key = volumes.split('=')[0] + '-volume' %}
{%       if vars.update({'found': False}) %} {% endif %}
{%       if item.key in custom_services %}
{%         for key,value in custom_services.items() %}
{%           if key == item.key and value.deployment_overrides.volumes is defined and value.deployment_overrides.volumes %}
{%             if cm_key in value.deployment_overrides.volumes %}
{%               if vars.update({'found': True}) %} {% endif %}
{%             endif %}
{%           endif %}
{%         endfor %}
{%         if not vars.found %}
      - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
        emptyDir: {}
{%         endif %}
{%       else %}
      - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
        emptyDir: {}
{%       endif %}
{%     endfor %}
{%   else %}
{%     for volumes in item.value.volumes %}
      - name: {{ settings.project_name }}-{{ item.key }}-{{ volumes.split('=')[0] }}-volume
        emptyDir: {}
{%     endfor %}
{%   endif %}
{% endif %}
      # Needed for TLS configurations
      - name: tokens
        configMap:
          name: consul-tokens-configmap
      - name: anchors
        configMap:
          name: {{ settings.project_name }}-cacerts-configmap
  # Persistent storage required for TLS HA configurations
  # volumeClaimTemplates:
  # - metadata:
  #       name: consul-persistent-storage
  #   spec:
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 1Gi
  #     storageClassName: managed-nfs-storage
  selector:
    matchLabels:
      app: {{ settings.project_name }}-{{ item.key }}
      domain: {{ settings.project_name }}
...
