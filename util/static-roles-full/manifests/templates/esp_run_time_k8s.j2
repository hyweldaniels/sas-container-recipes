---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ settings.project_name }}-esp-run-time
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ settings.project_name }}-esp-run-time
        domain: {{ settings.project_name }}
    spec:
{% if SECURE_CONSUL %}
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      serviceAccountName: {{ settings.project_name }}-account
{% else %}
      # Required for TLS configurations
      #serviceAccountName: {{ settings.project_name }}-account
{% endif %}
      subdomain: {{ settings.project_name }}-subdomain
      containers:
      - name: {{ settings.project_name }}-esp-run-time
{% for regkey,regvalue in registries.items() %}
        image: {{ regvalue.url }}/{{ regvalue.namespace }}/{{ settings.project_name }}-{{ item.key }}:{{ docker_tag | default('latest') }}
{% endfor %}
        imagePullPolicy: Always
{% if item.value.ports is defined and item.value.ports %}
        ports:
{%   for ports in item.value.ports %}
        - containerPort: {{ ports.split(':')[0] }}
{%   endfor %}
{% endif %}
        env:
        - name: DEPLOYMENT_NAME
          value: "{{ settings.project_name }}"
        - name: CONSUL_SERVER_LIST
          value: "{{ settings.project_name }}-consul"
        - name: ESP_ROLE
          value: "run_time"
        - name: SECURE_CONSUL
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: secure_consul
        - name: DISABLE_CONSUL_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: disable_consul_http_port
        - name: SAS_ANCHORS_DIR
          valueFrom:
              configMapKeyRef:
                name: {{ settings.project_name }}-consul
                key: sas_anchors_dir
        - name: VAULT_TOKEN_DIR
          valueFrom:
              configMapKeyRef:
                name: {{ settings.project_name }}-consul
                key: vault_token_dir
{% for environment in services.consul.environment %}
{%   if environment.split('=')[0] == 'CONSUL_DATACENTER_NAME' %}
        - name: {{ environment.split('=')[0] }}
          valueFrom:
            configMapKeyRef:
              name: {{ settings.project_name }}-consul
              key: {{ environment.split('=')[0] | lower }}
{%   endif %}
{% endfor %}
{% for secrets in services.consul.secrets %}
{%   if secrets.split('=')[0] != 'CONSUL_TOKENS_MANAGEMENT' %}
        - name: {{ secrets.split('=')[0] }}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-consul
              key: {{ secrets.split('=')[0] | lower }}
{%   endif %}
{% endfor %}
{% if item.value.secrets is defined and item.value.secrets %}
{%   for secrets in item.value.secrets %}
{%     if secrets.split('=')[0] == 'SETINIT_TEXT_ENC' %}
        - name: SETINIT_TEXT
{%     else      %}
        - name: {{ secrets.split('=')[0] }}
{%     endif     %}
          valueFrom:
            secretKeyRef:
              name: {{ settings.project_name }}-{{ item.key | lower }}
              key: {{ secrets.split('=')[0] | lower }}
{%   endfor %}
{% endif %}
        resources:
{% if custom_services is defined and custom_services and item.key in custom_services %}
          # Writing out user defined resources
{%   if vars.update({'found': False}) %} {% endif %}
{%   for key,value in custom_services.items() %}
{%     if key == item.key and value.deployment_overrides.resources is defined and value.deployment_overrides.resources %}
{%      if vars.update({'found': True}) %} {% endif %}
          {{ value.deployment_overrides.resources | indent(10) }}
{%     endif %}
{%   endfor %}
{%   if not vars.found %}
{%     if item.value.resources is defined and item.value.resources %}
          # Writing out pre-defined resources
{%       for key,value in item.value.resources.items() %}
          {{ key }}:
{%         for items in value %}
            {{ items.split('=')[0] }}: {{ items.split('=')[1] }}
{%         endfor %}
{%       endfor %}
{%     endif %}
{%   endif %}
{% else %}
{%   if item.value.resources is defined and item.value.resources %}
          # Writing out pre-defined resources
{%     for key,value in item.value.resources.items() %}
          {{ key }}:
{%       for items in value %}
            {{ items.split('=')[0] }}: {{ items.split('=')[1] }}
{%       endfor %}
{%     endfor %}
{%   endif %}
{% endif %}
        volumeMounts:
{% if item.key == 'espserver' %}
        - name: {{ settings.project_name }}-esp-run-time-sysconfig
          mountPath: {{ SAS_CONFIG_ROOT }}/etc/sysconfig/SASEventStreamProcessingEngine
{% endif %}
{% if item.value.volumes is defined and item.value.volumes %}
{%   for volumes in item.value.volumes %}
        - name: {{ settings.project_name }}-esp-run-time-{{ volumes.split('=')[0] }}-volume
          mountPath: {{ volumes.split('=')[1] }}
{%   endfor %}
{% endif %}
{% if custom_volume_mounts is defined and custom_volume_mounts %}
{%   for mount_key,mount_value in custom_volume_mounts.items() %}
{%     if mount_key == item.key %}
        {{ mount_value | indent(8) }}
{%     endif %}
{%   endfor %}
{% endif %}
        - name: anchors
          mountPath: /anchors
        - name: tokens
          mountPath: /tokens
      volumes:
{% if item.key == 'espserver' %}
      - name: {{ settings.project_name }}-esp-run-time-sysconfig
        configMap:
          name: {{ settings.project_name }}-{{ item.key }}
          items:
          - key: espenv
            path: sas-esp
{% endif %}
{% if item.value.volumes is defined and item.value.volumes %}
{%   for volumes in item.value.volumes %}
      - name: {{ settings.project_name }}-esp-run-time-{{ volumes.split('=')[0] }}-volume
        emptyDir: {}
{%   endfor %}
{% endif %}
{% if custom_volumes is defined and custom_volumes %}
{%   for vol_key,vol_value in custom_volumes.items() %}
{%     if vol_key == item.key %}
      {{ vol_value | indent(6) }}
{%    endif %}
{%   endfor %}
{% endif %}
      # Needed for TLS configurations
      - name: tokens
        configMap:
          name: consul-tokens-configmap
      - name: anchors
        configMap:
          name: {{ settings.project_name }}-cacerts-configmap
  selector:
    matchLabels:
      app: {{ settings.project_name }}-esp-run-time
      domain: {{ settings.project_name }}
...
